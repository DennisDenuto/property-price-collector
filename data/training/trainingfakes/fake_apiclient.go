// This file was generated by counterfeiter
package trainingfakes

import (
	"io"
	"sync"

	"github.com/DennisDenuto/property-price-collector/data/training"
	"github.com/pachyderm/pachyderm/src/client"
	"github.com/pachyderm/pachyderm/src/client/pfs"
)

type FakeAPIClient struct {
	CreateRepoStub        func(repoName string) error
	createRepoMutex       sync.RWMutex
	createRepoArgsForCall []struct {
		repoName string
	}
	createRepoReturns struct {
		result1 error
	}
	ListRepoStub        func(provenance []string) ([]*pfs.RepoInfo, error)
	listRepoMutex       sync.RWMutex
	listRepoArgsForCall []struct {
		provenance []string
	}
	listRepoReturns struct {
		result1 []*pfs.RepoInfo
		result2 error
	}
	StartCommitStub        func(repoName string, branch string) (*pfs.Commit, error)
	startCommitMutex       sync.RWMutex
	startCommitArgsForCall []struct {
		repoName string
		branch   string
	}
	startCommitReturns struct {
		result1 *pfs.Commit
		result2 error
	}
	FinishCommitStub        func(repoName string, commitID string) error
	finishCommitMutex       sync.RWMutex
	finishCommitArgsForCall []struct {
		repoName string
		commitID string
	}
	finishCommitReturns struct {
		result1 error
	}
	ListCommitByRepoStub        func(repoName string) ([]*pfs.CommitInfo, error)
	listCommitByRepoMutex       sync.RWMutex
	listCommitByRepoArgsForCall []struct {
		repoName string
	}
	listCommitByRepoReturns struct {
		result1 []*pfs.CommitInfo
		result2 error
	}
	FlushCommitStub        func(commits []*pfs.Commit, toRepos []*pfs.Repo) (client.CommitInfoIterator, error)
	flushCommitMutex       sync.RWMutex
	flushCommitArgsForCall []struct {
		commits []*pfs.Commit
		toRepos []*pfs.Repo
	}
	flushCommitReturns struct {
		result1 client.CommitInfoIterator
		result2 error
	}
	PutFileStub        func(repoName string, commitID string, path string, reader io.Reader) (_ int, retErr error)
	putFileMutex       sync.RWMutex
	putFileArgsForCall []struct {
		repoName string
		commitID string
		path     string
		reader   io.Reader
	}
	putFileReturns struct {
		result1 int
		result2 error
	}
	GetFileReaderStub        func(repoName string, commitID string, path string, offset int64, size int64) (io.Reader, error)
	getFileReaderMutex       sync.RWMutex
	getFileReaderArgsForCall []struct {
		repoName string
		commitID string
		path     string
		offset   int64
		size     int64
	}
	getFileReaderReturns struct {
		result1 io.Reader
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAPIClient) CreateRepo(repoName string) error {
	fake.createRepoMutex.Lock()
	fake.createRepoArgsForCall = append(fake.createRepoArgsForCall, struct {
		repoName string
	}{repoName})
	fake.recordInvocation("CreateRepo", []interface{}{repoName})
	fake.createRepoMutex.Unlock()
	if fake.CreateRepoStub != nil {
		return fake.CreateRepoStub(repoName)
	} else {
		return fake.createRepoReturns.result1
	}
}

func (fake *FakeAPIClient) CreateRepoCallCount() int {
	fake.createRepoMutex.RLock()
	defer fake.createRepoMutex.RUnlock()
	return len(fake.createRepoArgsForCall)
}

func (fake *FakeAPIClient) CreateRepoArgsForCall(i int) string {
	fake.createRepoMutex.RLock()
	defer fake.createRepoMutex.RUnlock()
	return fake.createRepoArgsForCall[i].repoName
}

func (fake *FakeAPIClient) CreateRepoReturns(result1 error) {
	fake.CreateRepoStub = nil
	fake.createRepoReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAPIClient) ListRepo(provenance []string) ([]*pfs.RepoInfo, error) {
	var provenanceCopy []string
	if provenance != nil {
		provenanceCopy = make([]string, len(provenance))
		copy(provenanceCopy, provenance)
	}
	fake.listRepoMutex.Lock()
	fake.listRepoArgsForCall = append(fake.listRepoArgsForCall, struct {
		provenance []string
	}{provenanceCopy})
	fake.recordInvocation("ListRepo", []interface{}{provenanceCopy})
	fake.listRepoMutex.Unlock()
	if fake.ListRepoStub != nil {
		return fake.ListRepoStub(provenance)
	} else {
		return fake.listRepoReturns.result1, fake.listRepoReturns.result2
	}
}

func (fake *FakeAPIClient) ListRepoCallCount() int {
	fake.listRepoMutex.RLock()
	defer fake.listRepoMutex.RUnlock()
	return len(fake.listRepoArgsForCall)
}

func (fake *FakeAPIClient) ListRepoArgsForCall(i int) []string {
	fake.listRepoMutex.RLock()
	defer fake.listRepoMutex.RUnlock()
	return fake.listRepoArgsForCall[i].provenance
}

func (fake *FakeAPIClient) ListRepoReturns(result1 []*pfs.RepoInfo, result2 error) {
	fake.ListRepoStub = nil
	fake.listRepoReturns = struct {
		result1 []*pfs.RepoInfo
		result2 error
	}{result1, result2}
}

func (fake *FakeAPIClient) StartCommit(repoName string, branch string) (*pfs.Commit, error) {
	fake.startCommitMutex.Lock()
	fake.startCommitArgsForCall = append(fake.startCommitArgsForCall, struct {
		repoName string
		branch   string
	}{repoName, branch})
	fake.recordInvocation("StartCommit", []interface{}{repoName, branch})
	fake.startCommitMutex.Unlock()
	if fake.StartCommitStub != nil {
		return fake.StartCommitStub(repoName, branch)
	} else {
		return fake.startCommitReturns.result1, fake.startCommitReturns.result2
	}
}

func (fake *FakeAPIClient) StartCommitCallCount() int {
	fake.startCommitMutex.RLock()
	defer fake.startCommitMutex.RUnlock()
	return len(fake.startCommitArgsForCall)
}

func (fake *FakeAPIClient) StartCommitArgsForCall(i int) (string, string) {
	fake.startCommitMutex.RLock()
	defer fake.startCommitMutex.RUnlock()
	return fake.startCommitArgsForCall[i].repoName, fake.startCommitArgsForCall[i].branch
}

func (fake *FakeAPIClient) StartCommitReturns(result1 *pfs.Commit, result2 error) {
	fake.StartCommitStub = nil
	fake.startCommitReturns = struct {
		result1 *pfs.Commit
		result2 error
	}{result1, result2}
}

func (fake *FakeAPIClient) FinishCommit(repoName string, commitID string) error {
	fake.finishCommitMutex.Lock()
	fake.finishCommitArgsForCall = append(fake.finishCommitArgsForCall, struct {
		repoName string
		commitID string
	}{repoName, commitID})
	fake.recordInvocation("FinishCommit", []interface{}{repoName, commitID})
	fake.finishCommitMutex.Unlock()
	if fake.FinishCommitStub != nil {
		return fake.FinishCommitStub(repoName, commitID)
	} else {
		return fake.finishCommitReturns.result1
	}
}

func (fake *FakeAPIClient) FinishCommitCallCount() int {
	fake.finishCommitMutex.RLock()
	defer fake.finishCommitMutex.RUnlock()
	return len(fake.finishCommitArgsForCall)
}

func (fake *FakeAPIClient) FinishCommitArgsForCall(i int) (string, string) {
	fake.finishCommitMutex.RLock()
	defer fake.finishCommitMutex.RUnlock()
	return fake.finishCommitArgsForCall[i].repoName, fake.finishCommitArgsForCall[i].commitID
}

func (fake *FakeAPIClient) FinishCommitReturns(result1 error) {
	fake.FinishCommitStub = nil
	fake.finishCommitReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAPIClient) ListCommitByRepo(repoName string) ([]*pfs.CommitInfo, error) {
	fake.listCommitByRepoMutex.Lock()
	fake.listCommitByRepoArgsForCall = append(fake.listCommitByRepoArgsForCall, struct {
		repoName string
	}{repoName})
	fake.recordInvocation("ListCommitByRepo", []interface{}{repoName})
	fake.listCommitByRepoMutex.Unlock()
	if fake.ListCommitByRepoStub != nil {
		return fake.ListCommitByRepoStub(repoName)
	} else {
		return fake.listCommitByRepoReturns.result1, fake.listCommitByRepoReturns.result2
	}
}

func (fake *FakeAPIClient) ListCommitByRepoCallCount() int {
	fake.listCommitByRepoMutex.RLock()
	defer fake.listCommitByRepoMutex.RUnlock()
	return len(fake.listCommitByRepoArgsForCall)
}

func (fake *FakeAPIClient) ListCommitByRepoArgsForCall(i int) string {
	fake.listCommitByRepoMutex.RLock()
	defer fake.listCommitByRepoMutex.RUnlock()
	return fake.listCommitByRepoArgsForCall[i].repoName
}

func (fake *FakeAPIClient) ListCommitByRepoReturns(result1 []*pfs.CommitInfo, result2 error) {
	fake.ListCommitByRepoStub = nil
	fake.listCommitByRepoReturns = struct {
		result1 []*pfs.CommitInfo
		result2 error
	}{result1, result2}
}

func (fake *FakeAPIClient) FlushCommit(commits []*pfs.Commit, toRepos []*pfs.Repo) (client.CommitInfoIterator, error) {
	var commitsCopy []*pfs.Commit
	if commits != nil {
		commitsCopy = make([]*pfs.Commit, len(commits))
		copy(commitsCopy, commits)
	}
	var toReposCopy []*pfs.Repo
	if toRepos != nil {
		toReposCopy = make([]*pfs.Repo, len(toRepos))
		copy(toReposCopy, toRepos)
	}
	fake.flushCommitMutex.Lock()
	fake.flushCommitArgsForCall = append(fake.flushCommitArgsForCall, struct {
		commits []*pfs.Commit
		toRepos []*pfs.Repo
	}{commitsCopy, toReposCopy})
	fake.recordInvocation("FlushCommit", []interface{}{commitsCopy, toReposCopy})
	fake.flushCommitMutex.Unlock()
	if fake.FlushCommitStub != nil {
		return fake.FlushCommitStub(commits, toRepos)
	} else {
		return fake.flushCommitReturns.result1, fake.flushCommitReturns.result2
	}
}

func (fake *FakeAPIClient) FlushCommitCallCount() int {
	fake.flushCommitMutex.RLock()
	defer fake.flushCommitMutex.RUnlock()
	return len(fake.flushCommitArgsForCall)
}

func (fake *FakeAPIClient) FlushCommitArgsForCall(i int) ([]*pfs.Commit, []*pfs.Repo) {
	fake.flushCommitMutex.RLock()
	defer fake.flushCommitMutex.RUnlock()
	return fake.flushCommitArgsForCall[i].commits, fake.flushCommitArgsForCall[i].toRepos
}

func (fake *FakeAPIClient) FlushCommitReturns(result1 client.CommitInfoIterator, result2 error) {
	fake.FlushCommitStub = nil
	fake.flushCommitReturns = struct {
		result1 client.CommitInfoIterator
		result2 error
	}{result1, result2}
}

func (fake *FakeAPIClient) PutFile(repoName string, commitID string, path string, reader io.Reader) (_ int, retErr error) {
	fake.putFileMutex.Lock()
	fake.putFileArgsForCall = append(fake.putFileArgsForCall, struct {
		repoName string
		commitID string
		path     string
		reader   io.Reader
	}{repoName, commitID, path, reader})
	fake.recordInvocation("PutFile", []interface{}{repoName, commitID, path, reader})
	fake.putFileMutex.Unlock()
	if fake.PutFileStub != nil {
		return fake.PutFileStub(repoName, commitID, path, reader)
	} else {
		return fake.putFileReturns.result1, fake.putFileReturns.result2
	}
}

func (fake *FakeAPIClient) PutFileCallCount() int {
	fake.putFileMutex.RLock()
	defer fake.putFileMutex.RUnlock()
	return len(fake.putFileArgsForCall)
}

func (fake *FakeAPIClient) PutFileArgsForCall(i int) (string, string, string, io.Reader) {
	fake.putFileMutex.RLock()
	defer fake.putFileMutex.RUnlock()
	return fake.putFileArgsForCall[i].repoName, fake.putFileArgsForCall[i].commitID, fake.putFileArgsForCall[i].path, fake.putFileArgsForCall[i].reader
}

func (fake *FakeAPIClient) PutFileReturns(result1 int, result2 error) {
	fake.PutFileStub = nil
	fake.putFileReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeAPIClient) GetFileReader(repoName string, commitID string, path string, offset int64, size int64) (io.Reader, error) {
	fake.getFileReaderMutex.Lock()
	fake.getFileReaderArgsForCall = append(fake.getFileReaderArgsForCall, struct {
		repoName string
		commitID string
		path     string
		offset   int64
		size     int64
	}{repoName, commitID, path, offset, size})
	fake.recordInvocation("GetFileReader", []interface{}{repoName, commitID, path, offset, size})
	fake.getFileReaderMutex.Unlock()
	if fake.GetFileReaderStub != nil {
		return fake.GetFileReaderStub(repoName, commitID, path, offset, size)
	} else {
		return fake.getFileReaderReturns.result1, fake.getFileReaderReturns.result2
	}
}

func (fake *FakeAPIClient) GetFileReaderCallCount() int {
	fake.getFileReaderMutex.RLock()
	defer fake.getFileReaderMutex.RUnlock()
	return len(fake.getFileReaderArgsForCall)
}

func (fake *FakeAPIClient) GetFileReaderArgsForCall(i int) (string, string, string, int64, int64) {
	fake.getFileReaderMutex.RLock()
	defer fake.getFileReaderMutex.RUnlock()
	return fake.getFileReaderArgsForCall[i].repoName, fake.getFileReaderArgsForCall[i].commitID, fake.getFileReaderArgsForCall[i].path, fake.getFileReaderArgsForCall[i].offset, fake.getFileReaderArgsForCall[i].size
}

func (fake *FakeAPIClient) GetFileReaderReturns(result1 io.Reader, result2 error) {
	fake.GetFileReaderStub = nil
	fake.getFileReaderReturns = struct {
		result1 io.Reader
		result2 error
	}{result1, result2}
}

func (fake *FakeAPIClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createRepoMutex.RLock()
	defer fake.createRepoMutex.RUnlock()
	fake.listRepoMutex.RLock()
	defer fake.listRepoMutex.RUnlock()
	fake.startCommitMutex.RLock()
	defer fake.startCommitMutex.RUnlock()
	fake.finishCommitMutex.RLock()
	defer fake.finishCommitMutex.RUnlock()
	fake.listCommitByRepoMutex.RLock()
	defer fake.listCommitByRepoMutex.RUnlock()
	fake.flushCommitMutex.RLock()
	defer fake.flushCommitMutex.RUnlock()
	fake.putFileMutex.RLock()
	defer fake.putFileMutex.RUnlock()
	fake.getFileReaderMutex.RLock()
	defer fake.getFileReaderMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeAPIClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ training.APIClient = new(FakeAPIClient)
