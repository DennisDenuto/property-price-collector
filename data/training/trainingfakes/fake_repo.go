// This file was generated by counterfeiter
package trainingfakes

import (
	"sync"

	"github.com/DennisDenuto/property-price-collector/data/training"
)

type FakeRepo struct {
	CreateStub        func() error
	createMutex       sync.RWMutex
	createArgsForCall []struct{}
	createReturns     struct {
		result1 error
	}
	StartTxnStub        func() error
	startTxnMutex       sync.RWMutex
	startTxnArgsForCall []struct{}
	startTxnReturns     struct {
		result1 error
	}
	AddStub        func(interface{}) error
	addMutex       sync.RWMutex
	addArgsForCall []struct {
		arg1 interface{}
	}
	addReturns struct {
		result1 error
	}
	CommitStub        func() error
	commitMutex       sync.RWMutex
	commitArgsForCall []struct{}
	commitReturns     struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRepo) Create() error {
	fake.createMutex.Lock()
	fake.createArgsForCall = append(fake.createArgsForCall, struct{}{})
	fake.recordInvocation("Create", []interface{}{})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub()
	} else {
		return fake.createReturns.result1
	}
}

func (fake *FakeRepo) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeRepo) CreateReturns(result1 error) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRepo) StartTxn() error {
	fake.startTxnMutex.Lock()
	fake.startTxnArgsForCall = append(fake.startTxnArgsForCall, struct{}{})
	fake.recordInvocation("StartTxn", []interface{}{})
	fake.startTxnMutex.Unlock()
	if fake.StartTxnStub != nil {
		return fake.StartTxnStub()
	} else {
		return fake.startTxnReturns.result1
	}
}

func (fake *FakeRepo) StartTxnCallCount() int {
	fake.startTxnMutex.RLock()
	defer fake.startTxnMutex.RUnlock()
	return len(fake.startTxnArgsForCall)
}

func (fake *FakeRepo) StartTxnReturns(result1 error) {
	fake.StartTxnStub = nil
	fake.startTxnReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRepo) Add(arg1 interface{}) error {
	fake.addMutex.Lock()
	fake.addArgsForCall = append(fake.addArgsForCall, struct {
		arg1 interface{}
	}{arg1})
	fake.recordInvocation("Add", []interface{}{arg1})
	fake.addMutex.Unlock()
	if fake.AddStub != nil {
		return fake.AddStub(arg1)
	} else {
		return fake.addReturns.result1
	}
}

func (fake *FakeRepo) AddCallCount() int {
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	return len(fake.addArgsForCall)
}

func (fake *FakeRepo) AddArgsForCall(i int) interface{} {
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	return fake.addArgsForCall[i].arg1
}

func (fake *FakeRepo) AddReturns(result1 error) {
	fake.AddStub = nil
	fake.addReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRepo) Commit() error {
	fake.commitMutex.Lock()
	fake.commitArgsForCall = append(fake.commitArgsForCall, struct{}{})
	fake.recordInvocation("Commit", []interface{}{})
	fake.commitMutex.Unlock()
	if fake.CommitStub != nil {
		return fake.CommitStub()
	} else {
		return fake.commitReturns.result1
	}
}

func (fake *FakeRepo) CommitCallCount() int {
	fake.commitMutex.RLock()
	defer fake.commitMutex.RUnlock()
	return len(fake.commitArgsForCall)
}

func (fake *FakeRepo) CommitReturns(result1 error) {
	fake.CommitStub = nil
	fake.commitReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRepo) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.startTxnMutex.RLock()
	defer fake.startTxnMutex.RUnlock()
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	fake.commitMutex.RLock()
	defer fake.commitMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeRepo) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ training.Repo = new(FakeRepo)
