// This file was generated by counterfeiter
package trainingfakes

import (
	"sync"

	"github.com/DennisDenuto/property-price-collector/data"
	"github.com/DennisDenuto/property-price-collector/data/training"
)

type FakePropertyHistoryRepo struct {
	AddStub        func(data data.PropertyHistoryData) error
	addMutex       sync.RWMutex
	addArgsForCall []struct {
		data data.PropertyHistoryData
	}
	addReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePropertyHistoryRepo) Add(data data.PropertyHistoryData) error {
	fake.addMutex.Lock()
	fake.addArgsForCall = append(fake.addArgsForCall, struct {
		data data.PropertyHistoryData
	}{data})
	fake.recordInvocation("Add", []interface{}{data})
	fake.addMutex.Unlock()
	if fake.AddStub != nil {
		return fake.AddStub(data)
	} else {
		return fake.addReturns.result1
	}
}

func (fake *FakePropertyHistoryRepo) AddCallCount() int {
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	return len(fake.addArgsForCall)
}

func (fake *FakePropertyHistoryRepo) AddArgsForCall(i int) data.PropertyHistoryData {
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	return fake.addArgsForCall[i].data
}

func (fake *FakePropertyHistoryRepo) AddReturns(result1 error) {
	fake.AddStub = nil
	fake.addReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePropertyHistoryRepo) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	return fake.invocations
}

func (fake *FakePropertyHistoryRepo) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ training.PropertyHistoryRepo = new(FakePropertyHistoryRepo)
