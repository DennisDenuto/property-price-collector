// This file was generated by counterfeiter
package dropboxfakes

import (
	"io"
	"sync"

	"github.com/dropbox/dropbox-sdk-go-unofficial/dropbox/files"
)

type FakeClient struct {
	UploadStub        func(arg *files.CommitInfo, content io.Reader) (res *files.FileMetadata, err error)
	uploadMutex       sync.RWMutex
	uploadArgsForCall []struct {
		arg     *files.CommitInfo
		content io.Reader
	}
	uploadReturns struct {
		result1 *files.FileMetadata
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) Upload(arg *files.CommitInfo, content io.Reader) (res *files.FileMetadata, err error) {
	fake.uploadMutex.Lock()
	fake.uploadArgsForCall = append(fake.uploadArgsForCall, struct {
		arg     *files.CommitInfo
		content io.Reader
	}{arg, content})
	fake.recordInvocation("Upload", []interface{}{arg, content})
	fake.uploadMutex.Unlock()
	if fake.UploadStub != nil {
		return fake.UploadStub(arg, content)
	} else {
		return fake.uploadReturns.result1, fake.uploadReturns.result2
	}
}

func (fake *FakeClient) UploadCallCount() int {
	fake.uploadMutex.RLock()
	defer fake.uploadMutex.RUnlock()
	return len(fake.uploadArgsForCall)
}

func (fake *FakeClient) UploadArgsForCall(i int) (*files.CommitInfo, io.Reader) {
	fake.uploadMutex.RLock()
	defer fake.uploadMutex.RUnlock()
	return fake.uploadArgsForCall[i].arg, fake.uploadArgsForCall[i].content
}

func (fake *FakeClient) UploadReturns(result1 *files.FileMetadata, result2 error) {
	fake.UploadStub = nil
	fake.uploadReturns = struct {
		result1 *files.FileMetadata
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.uploadMutex.RLock()
	defer fake.uploadMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
